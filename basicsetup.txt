    // Message definitions
    public class RequestMessage
    {
        public string Sender { get; }
        public string Content { get; }

        public RequestMessage(string sender, string content)
        {
            Sender = sender;
            Content = content;
        }
    }

    public class ResponseMessage
    {
        public string Responder { get; }
        public string Content { get; }

        public ResponseMessage(string responder, string content)
        {
            Responder = responder;
            Content = content;
        }
    }

    public class GetTrafficLogMessage { }

    // Actor representing a service endpoint
    public class ServiceEndpointActor : ReceiveActor
    {
        private readonly string _name;
        private readonly List<string> _trafficLog = new();

        public ServiceEndpointActor(string name)
        {
            _name = name;

            Receive<RequestMessage>(msg =>
            {
                var logEntry = $"Received request from {msg.Sender}: {msg.Content}";
                _trafficLog.Add(logEntry);
                Console.WriteLine($"[{_name}] {logEntry}");
                Sender.Tell(new ResponseMessage(_name, $"Acknowledged: {msg.Content}"));
            });

            Receive<ResponseMessage>(msg =>
            {
                var logEntry = $"Received response from {msg.Responder}: {msg.Content}";
                _trafficLog.Add(logEntry);
                Console.WriteLine($"[{_name}] {logEntry}");
            });

            Receive<GetTrafficLogMessage>(_ => Sender.Tell(_trafficLog));
        }
    }

    // Actor representing a service with multiple endpoints
    public class ServiceActor : ReceiveActor
    {
        private readonly string _serviceName;
        private readonly List<IActorRef> _endpoints = new();

        public ServiceActor(string serviceName, List<string> endpointNames)
        {
            _serviceName = serviceName;

            foreach (var endpointName in endpointNames)
            {
                var endpoint = Context.ActorOf(Props.Create(() => new ServiceEndpointActor(endpointName)), endpointName);
                _endpoints.Add(endpoint);
            }

            Receive<RequestMessage>(msg =>
            {
                Console.WriteLine($"[{_serviceName}] Handling request from {msg.Sender}: {msg.Content}");
                var endpoint = _endpoints[new Random().Next(_endpoints.Count)];
                endpoint.Forward(msg);
            });

            Receive<GetTrafficLogMessage>(async msg =>
            {
                var responses = await Task.WhenAll(_endpoints.Select(endpoint => endpoint.Ask<List<string>>(msg)));
                Sender.Tell(responses.SelectMany(r => r).ToList());
            });
        }
    }
