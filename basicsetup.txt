using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using Akka.Actor;

namespace AkkaNetServiceEndpoints
{
    // Message definitions
    public class RequestMessage
    {
        public string Sender { get; }
        public string Content { get; }

        public RequestMessage(string sender, string content)
        {
            Sender = sender;
            Content = content;
        }
    }

    public class ResponseMessage
    {
        public string Responder { get; }
        public string Content { get; }

        public ResponseMessage(string responder, string content)
        {
            Responder = responder;
            Content = content;
        }
    }

    public class GetTrafficLogMessage { }

    // Actor representing a service endpoint
    public class ServiceEndpointActor : ReceiveActor
    {
        private readonly string _name;
        private readonly List<string> _trafficLog = new();

        public ServiceEndpointActor(string name)
        {
            _name = name;

            Receive<RequestMessage>(msg =>
            {
                var logEntry = $"Received request from {msg.Sender}: {msg.Content}";
                _trafficLog.Add(logEntry);
                Console.WriteLine($"[{_name}] {logEntry}");
                Sender.Tell(new ResponseMessage(_name, $"Acknowledged: {msg.Content}"));
            });

            Receive<ResponseMessage>(msg =>
            {
                var logEntry = $"Received response from {msg.Responder}: {msg.Content}";
                _trafficLog.Add(logEntry);
                Console.WriteLine($"[{_name}] {logEntry}");
            });

            Receive<GetTrafficLogMessage>(_ => Sender.Tell(_trafficLog));
        }
    }

    // Actor representing a service with multiple endpoints
    public class ServiceActor : ReceiveActor
    {
        private readonly string _serviceName;
        private readonly List<IActorRef> _endpoints = new();

        public ServiceActor(string serviceName, List<string> endpointNames)
        {
            _serviceName = serviceName;

            foreach (var endpointName in endpointNames)
            {
                var endpoint = Context.ActorOf(Props.Create(() => new ServiceEndpointActor(endpointName)), endpointName);
                _endpoints.Add(endpoint);
            }

            Receive<RequestMessage>(msg =>
            {
                Console.WriteLine($"[{_serviceName}] Handling request from {msg.Sender}: {msg.Content}");
                var endpoint = _endpoints[new Random().Next(_endpoints.Count)];
                endpoint.Forward(msg);
            });

            Receive<GetTrafficLogMessage>(async msg =>
            {
                var responses = await Task.WhenAll(_endpoints.Select(endpoint => endpoint.Ask<List<string>>(msg)));
                Sender.Tell(responses.SelectMany(r => r).ToList());
            });
        }
    }

    [ApiController]
    [Route("api/[controller]")]
    public class TrafficController : ControllerBase
    {
        private readonly IActorRef _serviceA;
        private readonly IActorRef _serviceB;

        public TrafficController([FromKeyedServices("ServiceA")] IActorRef serviceA, [FromKeyedServices("ServiceB")] IActorRef serviceB)
        {
            _serviceA = serviceA;
            _serviceB = serviceB;
        }

        [HttpGet("traffic")]
        public async Task<IActionResult> GetTraffic()
        {
            var serviceALog = await _serviceA.Ask<List<string>>(new GetTrafficLogMessage());
            var serviceBLog = await _serviceB.Ask<List<string>>(new GetTrafficLogMessage());

            var trafficLog = new
            {
                ServiceA = serviceALog,
                ServiceB = serviceBLog
            };

            return Ok(trafficLog);
        }

        [HttpPost("send")]
        public IActionResult SendMessage([FromQuery] string sender, [FromQuery] string recipient, [FromQuery] string content)
        {
            if (recipient == "ServiceA")
            {
                _serviceA.Tell(new RequestMessage(sender, content));
            }
            else if (recipient == "ServiceB")
            {
                _serviceB.Tell(new RequestMessage(sender, content));
            }
            else
            {
                return BadRequest("Invalid recipient");
            }

            return Ok("Message sent");
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            var actorSystem = ActorSystem.Create("ServiceNetwork");
            var serviceA = actorSystem.ActorOf(Props.Create(() => new ServiceActor("ServiceA", new List<string>
            {
                "ServiceA-Endpoint1",
                "ServiceA-Endpoint2",
                "ServiceA-Endpoint3"
            })), "ServiceA");
            var serviceB = actorSystem.ActorOf(Props.Create(() => new ServiceActor("ServiceB", new List<string>
            {
                "ServiceB-Endpoint1",
                "ServiceB-Endpoint2"
            })), "ServiceB");

            builder.Services.AddSingleton(actorSystem);
            builder.Services.AddKeyedSingleton("ServiceA", serviceA);
            builder.Services.AddKeyedSingleton("ServiceB", serviceB);
            builder.Services.AddControllers();
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "AkkaNetServiceEndpoints", Version = "v1" });
            });

            var app = builder.Build();

            if (app.Environment.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "AkkaNetServiceEndpoints v1"));
            }

            app.MapControllers();

            app.Run();
        }
    }
}
